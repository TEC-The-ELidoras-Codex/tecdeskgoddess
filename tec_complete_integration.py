#!/usr/bin/env python3
"""
TEC: Complete Chat to World Anvil Integration
Bridge the gap between AI conversations and World Anvil articles
Protocol: TEC_CSS_072125_V1 - Visual Sovereignty Implementation
"""

import os
import sys
import json
from typing import Dict, Any, Optional

# Add the project root to path for imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from tec_tools.world_anvil_tools import (
        WorldAnvilAPI, 
        TECCharacterExporter, 
        TECVisualSovereignty, 
        TECContentProcessor
    )
except ImportError:
    print("‚ö†Ô∏è  Could not import TEC tools. Running in demo mode.")
    # Define dummy classes for demo
    class WorldAnvilAPI:
        def __init__(self, *args, **kwargs): pass
    class TECCharacterExporter:
        def __init__(self, *args, **kwargs): pass
    class TECVisualSovereignty:
        def generate_world_css(self, *args, **kwargs): return "/* Demo CSS */"
        def save_css_to_file(self, *args, **kwargs): return "demo.css"
    class TECContentProcessor:
        def chat_to_article(self, content, title, article_type):
            return {'content': f"Demo article for {title}"}

class TECWorldAnvilBridge:
    """
    Complete bridge between TEC AI chats and World Anvil
    Implements the full Visual Sovereignty Protocol
    """
    
    def __init__(self, app_key: Optional[str] = None, auth_token: Optional[str] = None, world_id: Optional[str] = None):
        self.api = WorldAnvilAPI(app_key, auth_token, world_id)
        self.exporter = TECCharacterExporter(self.api)
        self.css_manager = TECVisualSovereignty()
        self.content_processor = TECContentProcessor()
        
        # Check if we have API credentials
        self.api_enabled = all([app_key, auth_token, world_id])
    
    def setup_world_styling(self) -> Dict[str, Any]:
        """
        Generate and optionally apply TEC CSS to World Anvil
        """
        css_content = self.css_manager.generate_world_css(include_extensions=True)
        css_file = self.css_manager.save_css_to_file("tec_world_anvil_complete.css")
        
        return {
            'css_file': css_file,
            'css_content': css_content,
            'instructions': [
                "1. Open your World Anvil world settings",
                "2. Navigate to 'Styling & CSS' in the sidebar",
                "3. Copy the CSS content from the generated file",
                "4. Paste into the 'World CSS' text box",
                "5. Save changes to apply TEC Visual Sovereignty"
            ]
        }
    
    def chat_to_world_anvil(self, chat_content: str, title: str, 
                           article_type: str = 'lore', auto_publish: bool = False) -> Dict[str, Any]:
        """
        Convert AI chat content directly to World Anvil article
        
        Args:
            chat_content: Raw chat conversation
            title: Article title
            article_type: Type ('character', 'location', 'event', 'lore', 'log')
            auto_publish: Whether to automatically publish to World Anvil
            
        Returns:
            Result dictionary with article data and status
        """
        
        # Process the content
        processed_article = self.content_processor.chat_to_article(
            chat_content, title, article_type
        )
        
        result = {
            'title': title,
            'type': article_type,
            'formatted_content': processed_article['content'],
            'bbcode_ready': True,
            'tec_styled': True,
            'api_published': False
        }
        
        return result
    
    def save_article_to_file(self, result: Dict[str, Any], filename: Optional[str] = None) -> str:
        """Save processed article to a file for manual copy-paste"""
        if not filename:
            title = result['title'].replace(' ', '_').lower()
            filename = f"{title}_{result['type']}_article.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"# {result['title']} - {result['type'].title()} Article\n")
            f.write(f"# Generated by TEC Visual Sovereignty Protocol: TEC_CSS_072125_V1\n\n")
            f.write("# COPY THE CONTENT BELOW TO WORLD ANVIL:\n")
            f.write("# " + "="*60 + "\n\n")
            f.write(result['formatted_content'])
            f.write("\n\n# " + "="*60)
            f.write("\n# End of Article Content")
        
        return filename

def main():
    """
    Interactive demo and usage examples
    """
    print("üé≠ TEC Complete World Anvil Integration")
    print("üé® Visual Sovereignty Protocol: TEC_CSS_072125_V1")
    print("üåâ Bridge the gap between AI chats and World Anvil")
    print("=" * 70)
    
    # Initialize the bridge
    bridge = TECWorldAnvilBridge()
    
    print(f"\nüîß API Status: {'‚úÖ Enabled' if bridge.api_enabled else '‚ùå Demo Mode (No API credentials)'}")
    
    # Setup CSS
    print("\nüé® Setting up TEC Visual Sovereignty...")
    css_result = bridge.setup_world_styling()
    print(f"‚úÖ CSS generated: {css_result['css_file']}")
    
    # Example usage with realistic chat content
    print("\nüé≠ EXAMPLE: Converting AI Chat to World Anvil Article")
    
    example_chat = """Human: Tell me about creating a character who represents the balance between technology and nature in a digital universe.

AI: I'd love to help you explore that concept! A character who embodies the balance between technology and nature in a digital realm could be fascinating.

This character could be someone who was originally human but underwent a transformation that allowed them to exist in digital space while maintaining a deep connection to organic life. They might have the ability to grow digital forests that feel completely real, or create healing sanctuaries within harsh technological environments.

Their personality would likely be contemplative and wise, with a natural inclination toward harmony and balance. They'd probably be a peacemaker among digital beings, able to see both sides of conflicts between those who embrace pure technology and those who long for more organic experiences.

In terms of abilities, they could manipulate both data streams and digital representations of natural elements. Perhaps they can accelerate the growth of digital plants, purify corrupted data through natural processes, or create pocket dimensions that feel like real forests or gardens."""
    
    # Process the chat
    result = bridge.chat_to_world_anvil(
        example_chat, 
        "The Digital Druid", 
        "character"
    )
    
    # Save to file
    filename = bridge.save_article_to_file(result)
    print(f"‚úÖ Article saved to: {filename}")
    
    print("\nüìã IMPLEMENTATION WORKFLOW:")
    print("1. Have an AI conversation about TEC content")
    print("2. Copy the conversation text")
    print("3. Use bridge.chat_to_world_anvil(chat_text, title, type)")
    print("4. Copy the formatted content to World Anvil")
    print("5. Apply the TEC CSS for visual sovereignty")
    
    print("\nüéØ RESULT:")
    print("Your AI chats become beautiful, styled World Anvil articles!")
    print("Complete with glassmorphism panels, glitch effects, and TEC branding!")

if __name__ == "__main__":
    main()
